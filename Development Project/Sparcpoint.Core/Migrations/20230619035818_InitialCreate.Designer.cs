// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sparcpoint.Core.Persistence.Entity.Sparcpoint.Context;

#nullable disable

namespace Sparcpoint.Migrations
{
    [DbContext(typeof(SparcpointBaseContext))]
    [Migration("20230619035818_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Sparcpoint.Inventory.Database;Integrated Security=true");

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryCategory", b =>
                {
                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryInstanceId")
                        .HasColumnType("int");

                    b.HasKey("InstanceId", "CategoryInstanceId");

                    b.HasIndex("CategoryInstanceId");

                    b.ToTable("CategoryCategories", "Instances");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryInstanceId")
                        .HasColumnType("int");

                    b.HasKey("InstanceId", "CategoryInstanceId");

                    b.HasIndex("CategoryInstanceId");

                    b.ToTable("ProductCategories", "Instances");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Category", b =>
                {
                    b.Property<int>("InstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstanceId"), 1L, 1);

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("sysutcdatetime()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.HasKey("InstanceId");

                    b.ToTable("Categories", "Instances");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.CategoryAttribute", b =>
                {
                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.HasKey("InstanceId", "Key");

                    b.ToTable("CategoryAttributes", "Instances");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.InventoryTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<DateTime?>("CompletedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductInstanceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(19,6)");

                    b.Property<DateTime>("StartedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("sysutcdatetime()");

                    b.Property<string>("TypeCategory")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "CompletedTimestamp" }, "IX_InventoryTransactions_CompletedTimestamp");

                    b.HasIndex(new[] { "ProductInstanceId" }, "IX_InventoryTransactions_ProductInstanceId");

                    b.HasIndex(new[] { "ProductInstanceId", "Quantity" }, "IX_InventoryTransactions_ProductInstanceId_Quantity");

                    b.ToTable("InventoryTransactions", "Transactions");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Product", b =>
                {
                    b.Property<int>("InstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstanceId"), 1L, 1);

                    b.Property<DateTime>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("sysutcdatetime()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ProductImageUris")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ValidSkus")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("InstanceId");

                    b.ToTable("Products", "Instances");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.HasKey("InstanceId", "Key");

                    b.HasIndex(new[] { "Key", "Value" }, "IX_ProductAttributes_Key_Value");

                    b.ToTable("ProductAttributes", "Instances");
                });

            modelBuilder.Entity("CategoryCategory", b =>
                {
                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryInstanceId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryCategories_Categories_Categories");

                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryCategories_Categories");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategories_Categories");

                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategories_Products");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.CategoryAttribute", b =>
                {
                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Category", "Instance")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryAttributes_Categories");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.InventoryTransaction", b =>
                {
                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Product", "ProductInstance")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("ProductInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InventoryTransactions_Products");

                    b.Navigation("ProductInstance");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.ProductAttribute", b =>
                {
                    b.HasOne("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Product", "Instance")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductAttributes_Products");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Category", b =>
                {
                    b.Navigation("CategoryAttributes");
                });

            modelBuilder.Entity("Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities.Product", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("ProductAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
