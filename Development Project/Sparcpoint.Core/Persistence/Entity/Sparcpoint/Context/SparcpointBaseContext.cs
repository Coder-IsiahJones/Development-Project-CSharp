// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Sparcpoint.Core.Persistence.Entity.Sparcpoint.Entities;

namespace Sparcpoint.Core.Persistence.Entity.Sparcpoint.Context
{
    public partial class SparcpointBaseContext : DbContext
    {
        public SparcpointBaseContext(DbContextOptions<SparcpointBaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryAttribute> CategoryAttributes { get; set; }
        public virtual DbSet<InventoryTransaction> InventoryTransactions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductAttribute> ProductAttributes { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Sparcpoint.Inventory.Database;Integrated Security=true");

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.InstanceId);

                entity.ToTable("Categories", "Instances");

                entity.Property(e => e.CreatedTimestamp).HasDefaultValueSql("sysutcdatetime()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.HasMany(d => d.CategoryInstances)
                    .WithMany(p => p.Instances)
                    .UsingEntity<Dictionary<string, object>>(
                        "CategoryCategory",
                        l => l.HasOne<Category>().WithMany().HasForeignKey("CategoryInstanceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CategoryCategories_Categories_Categories"),
                        r => r.HasOne<Category>().WithMany().HasForeignKey("InstanceId").HasConstraintName("FK_CategoryCategories_Categories"),
                        j =>
                        {
                            j.HasKey("InstanceId", "CategoryInstanceId");

                            j.ToTable("CategoryCategories", "Instances");
                        });

                entity.HasMany(d => d.Instances)
                    .WithMany(p => p.CategoryInstances)
                    .UsingEntity<Dictionary<string, object>>(
                        "CategoryCategory",
                        l => l.HasOne<Category>().WithMany().HasForeignKey("InstanceId").HasConstraintName("FK_CategoryCategories_Categories"),
                        r => r.HasOne<Category>().WithMany().HasForeignKey("CategoryInstanceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CategoryCategories_Categories_Categories"),
                        j =>
                        {
                            j.HasKey("InstanceId", "CategoryInstanceId");

                            j.ToTable("CategoryCategories", "Instances");
                        });
            });

            modelBuilder.Entity<CategoryAttribute>(entity =>
            {
                entity.HasKey(e => new { e.InstanceId, e.Key });

                entity.ToTable("CategoryAttributes", "Instances");

                entity.Property(e => e.Key)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.HasOne(d => d.Instance)
                    .WithMany(p => p.CategoryAttributes)
                    .HasForeignKey(d => d.InstanceId)
                    .HasConstraintName("FK_CategoryAttributes_Categories");
            });

            modelBuilder.Entity<InventoryTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId);

                entity.ToTable("InventoryTransactions", "Transactions");

                entity.HasIndex(e => e.CompletedTimestamp, "IX_InventoryTransactions_CompletedTimestamp");

                entity.HasIndex(e => e.ProductInstanceId, "IX_InventoryTransactions_ProductInstanceId");

                entity.HasIndex(e => new { e.ProductInstanceId, e.Quantity }, "IX_InventoryTransactions_ProductInstanceId_Quantity");

                entity.Property(e => e.Quantity).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.StartedTimestamp).HasDefaultValueSql("sysutcdatetime()");

                entity.Property(e => e.TypeCategory)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProductInstance)
                    .WithMany(p => p.InventoryTransactions)
                    .HasForeignKey(d => d.ProductInstanceId)
                    .HasConstraintName("FK_InventoryTransactions_Products");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.InstanceId);

                entity.ToTable("Products", "Instances");

                entity.Property(e => e.CreatedTimestamp).HasDefaultValueSql("sysutcdatetime()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ProductImageUris)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.ValidSkus)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasMany(d => d.CategoryInstances)
                    .WithMany(p => p.InstancesNavigation)
                    .UsingEntity<Dictionary<string, object>>(
                        "ProductCategory",
                        l => l.HasOne<Category>().WithMany().HasForeignKey("CategoryInstanceId").HasConstraintName("FK_ProductCategories_Categories"),
                        r => r.HasOne<Product>().WithMany().HasForeignKey("InstanceId").HasConstraintName("FK_ProductCategories_Products"),
                        j =>
                        {
                            j.HasKey("InstanceId", "CategoryInstanceId");

                            j.ToTable("ProductCategories", "Instances");
                        });
            });

            modelBuilder.Entity<ProductAttribute>(entity =>
            {
                entity.HasKey(e => new { e.InstanceId, e.Key });

                entity.ToTable("ProductAttributes", "Instances");

                entity.HasIndex(e => new { e.Key, e.Value }, "IX_ProductAttributes_Key_Value");

                entity.Property(e => e.Key)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.HasOne(d => d.Instance)
                    .WithMany(p => p.ProductAttributes)
                    .HasForeignKey(d => d.InstanceId)
                    .HasConstraintName("FK_ProductAttributes_Products");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}